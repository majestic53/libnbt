libnbt is a C++ library for reading named byte tags

(This library will not work with maps produced using the anvil format (.mcr))

Building
-------

Instructions for compiling libnbt from source code

Requirements (tested on):
	- g++ 4.4.3 or newer
	- make 3.8 or newer
	- boost regex 1.42 or newer
	- zlib 1.2.3.3 or newer

For Debian:
	- sudo apt-get install build-essential make zlib-dev libboost1.42-all-dev

Building (produces a static lib):
	- make

To use static library:
	- g++ -o <EXECUTABLE NAME> <MAIN>.cpp -std=c++0x -lboost_regex -lz -I <PATH_TO_LIBNBT> -L <PATH_TO_LIBNBT> -lnbt

Usage
-------

The easiest way to access block/heightmap data for each chunk is to
use the region_file_reader object. No cleanup is necessary. All 
allocations/deallocations are handled internally within the reader.

To instantiate a region_file_reader object, either:

	region_file_reader reader;
	reader = region_file_reader("path-to-region-file");

or

	region_file_reader reader("path-to-region-file");

To read in block/heightmap data:

	std::vector<int8_t> blocks, heights;

	...

	reader.get_chunk_blocks_at(x, z, blocks);
	reader.get_chunk_heights_at(x, z, heights);

Parsing block/heightmap data:

	Data is stored in the chunks from the top-left to bottom right, and all coord are relative to
	the chunk itself.

	Block {x, z, y} = y + z * 128 + x * 2048
	HeightMap {x, z} = x + z * 16

Putting it all together:

#include <cstdint>
#include <iostream>
#include <vector>
#include "region_file_exc.hpp"
#include "region_file_reader.hpp"

int main(int argc, char *argv[]) {

	// instantiate a file reader
	region_file_reader reader;

	// create vectors to hold block/height data (int8_t == char)
	std::vector<int8_t> blocks, heights;

	try {

		// open a region file
		reader = region_file_reader("path-to-region-file");
		
		// iterate through all possible chunks within a region
		for(unsigned int z = 0; z < 32; ++z)
			for(unsigned int x = 0; x < 32; ++x) {
				
				// this keeps an exception from being thrown
				// when a non-existant chunk is requested
				if(!reader.is_filled(x, z))
					continue;

				// if everything goes well, retrieve the block/height data
				reader.get_chunk_blocks_at(x, z, blocks);
				reader.get_chunk_heights_at(x, z, heights);

				// ...
			}
				

	// catch all exception that may occur
	} catch(region_file_exc &exc) {
		std::cerr << exc.to_string() << std::endl;
		return exc.get_exception();
	}
	return 0;
}

License
-------

Copyright(C) 2012 David Jolly <majestic53@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
